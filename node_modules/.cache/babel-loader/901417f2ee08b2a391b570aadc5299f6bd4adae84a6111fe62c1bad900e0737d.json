{"ast":null,"code":"var _jsxFileName = \"/Users/rachelgapasin/Documents/websites/facts-logger/src/NewFactForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewFactForm({\n  fcategories\n}) {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [source, setSource] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const textLength = text.length;\n  function handleSubmit(e) {\n    // 1. prevent browser reload.\n    e.preventDefault();\n\n    // 2. check if data is valid. if so, create new fact.\n    if (text && source && category && textLength <= 200) {\n      const newFact = {\n        id: Math.round(Math.random() * 1000000),\n        text,\n        source,\n        category,\n        votesInteresting: 0,\n        votesMindblowing: 0,\n        votesFalse: 0,\n        createdIn: new Date().getCurrentYear()\n      };\n    }\n    // 3. create a new fact object.\n\n    // 4. add the new fact to the UI: add fact to state\n\n    // 5. reset input fields.\n\n    // 6. close the form.\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"fact-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Share a fact with the world...\",\n      value: text,\n      onChange: e => setText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: 200 - textLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"url\",\n      placeholder: \"Trustworthy source...\",\n      value: source,\n      onChange: e => setSource(e.target.value),\n      autoComplete: \"off\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: category,\n      onChange: e => setCategory(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Choose category:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: category.name,\n        children: [category.name[0].toUpperCase(), category.name.slice(1)]\n      }, category.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-large\",\n      children: \"Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(NewFactForm, \"peGKo5XaPmH+Prgp8Pua3IENBLg=\");\n_c = NewFactForm;\nexport default NewFactForm;\nvar _c;\n$RefreshReg$(_c, \"NewFactForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","NewFactForm","fcategories","_s","text","setText","source","setSource","category","setCategory","textLength","length","handleSubmit","e","preventDefault","newFact","id","Math","round","random","votesInteresting","votesMindblowing","votesFalse","createdIn","Date","getCurrentYear","className","onSubmit","children","type","placeholder","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","autoComplete","categories","map","name","toUpperCase","slice","_c","$RefreshReg$"],"sources":["/Users/rachelgapasin/Documents/websites/facts-logger/src/NewFactForm.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction NewFactForm({ fcategories }) {\n  const [text, setText] = useState(\"\");\n  const [source, setSource] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const textLength = text.length;\n\n  function handleSubmit(e) {\n    // 1. prevent browser reload.\n    e.preventDefault();\n\n    // 2. check if data is valid. if so, create new fact.\n    if (text && source && category && textLength <= 200) {\n      const newFact = {\n        id: Math.round(Math.random() * 1000000),\n        text,\n        source,\n        category,\n        votesInteresting: 0,\n        votesMindblowing: 0,\n        votesFalse: 0,\n        createdIn: new Date().getCurrentYear(),\n      };\n    }\n    // 3. create a new fact object.\n\n    // 4. add the new fact to the UI: add fact to state\n\n    // 5. reset input fields.\n\n    // 6. close the form.\n  }\n\n  return (\n    <form className=\"fact-form\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Share a fact with the world...\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <span>{200 - textLength}</span>\n      <input\n        type=\"url\"\n        placeholder=\"Trustworthy source...\"\n        value={source}\n        onChange={(e) => setSource(e.target.value)}\n        autoComplete=\"off\"\n      />\n      <select value={category} onChange={(e) => setCategory(e.target.value)}>\n        <option value=\"\">Choose category:</option>\n        {categories.map((category) => (\n          <option key={category.name} value={category.name}>\n            {category.name[0].toUpperCase()}\n            {category.name.slice(1)}\n          </option>\n        ))}\n      </select>\n      <button className=\"btn btn-large\">Post</button>\n    </form>\n  );\n}\n\nexport default NewFactForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}